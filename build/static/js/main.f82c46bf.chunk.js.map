{"version":3,"sources":["utils/RollDice.tsx","dice_images/dice_blank.svg","components/Dice/Die.tsx","components/Dice/DiceBoard.tsx","components/Testing/All_Tests/TestDeviation.tsx","components/Testing/TestContainer/Chart/TestData.tsx","components/Testing/TestPage.tsx","components/Panel/TabPanel.tsx","App.js","reportWebVitals.js","index.js"],"names":["RollDice","amtDice","results","i","result","diceRolled","numberRolled","Math","floor","random","push","Die","numberOfDice","currentDie","p","src","diceBlank","alt","width","height","style","marginLeft","DiceBoard","rollResults","toString","Test","testTitle","testExpectedOutput","testInput","React","input","setInput","tests","setTests","percentDeviation","setPercentDeviation","testPassed","setTestPassed","Card","sx","minWidth","backgroundColor","CardContent","Typography","fontSize","color","gutterBottom","variant","component","mb","TextField","onChange","event","target","value","id","label","mt","dice1Total","dice2Total","dice3Total","dice4Total","dice5Total","dice6Total","CardActions","Button","onClick","inputForTest","parseInt","console","log","testData","amountOfDice","testingResultTotals","j","generateTestData","max","min","size","TestPage","useTheme","Fragment","CssBaseline","Container","maxWidth","Box","bgcolor","padding","Stack","spacing","TabPanel","props","children","index","other","role","hidden","a11yProps","BasicTabs","setValue","setNumberOfDice","initRoll","initRolls","setRollResults","borderBottom","borderColor","Tabs","newValue","textColor","indicatorColor","Tab","className","AppBar","position","Grid","container","direction","justifyContent","alignItems","alignSelf","marginTop","borderTopLeftRadius","borderTopRightRadius","item","sm","Slider","minHeight","boxShadow","display","App","theme","createTheme","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","themes","current","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f82c46bf.chunk.js","sourcesContent":["import RollInterface from \"../utils/RollInterface\";\n\n// Random Number Generator Function\nconst RollDice = (amtDice: number) => {\n  var results: RollInterface[] = [];\n  for (var i = 0; i < amtDice; i++) {\n    // Random Dice Number\n    var random = Math.floor(Math.random() * (6 - 1 + 1) + 1);\n    let result: RollInterface = { diceRolled: i + 1, numberRolled: random };\n    results.push(result);\n  }\n  for (var i = 0; i < 5 - amtDice; i++) {\n    let result: RollInterface = { diceRolled: false, numberRolled: false };\n    results.push(result);\n  }\n\n  //console.log(results.length);\n\n  return results;\n};\n\nexport default RollDice;\n","export default __webpack_public_path__ + \"static/media/dice_blank.59cf7bcf.svg\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Input from \"@material-ui/core/Input\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport diceBlank from \"../../dice_images/dice_blank.svg\";\n\nimport RollDice from \"../../utils/RollDice\";\nimport DiceData from \"./DiceData\";\n\nexport const Die: React.FC<DiceData> = ({\n  numberOfDice,\n  currentDie,\n  numberRolled,\n  diceRolled,\n}: DiceData) => {\n  return (\n    <Box p={1}>\n      {numberOfDice >= currentDie &&\n        numberRolled == false &&\n        diceRolled == false && (\n          <div>\n            <img\n              src={diceBlank}\n              alt=\"loading...\"\n              width=\"200px\"\n              height=\"200px\"\n            />\n            <h1>{numberRolled}</h1>\n            <h1>{diceRolled}</h1>\n          </div>\n        )}\n\n      {numberOfDice >= currentDie &&\n        numberRolled != false &&\n        diceRolled != false && (\n          <>\n            <img\n              src={\"images/dice_\" + numberRolled + \".svg\"}\n              alt=\"loading...\"\n              width=\"200px\"\n              height=\"200px\"\n            />\n\n            <h1 style={{ marginLeft: \"45%\" }}>{numberRolled}</h1>\n          </>\n        )}\n    </Box>\n  );\n};\n\nexport default Die;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Input from \"@material-ui/core/Input\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport diceBlank from \"../../dice_images/dice_blank.svg\";\nimport dice1 from \"../dice_images/dice_1.svg\";\nimport dice2 from \"../dice_images/dice_2.svg\";\nimport dice3 from \"../dice_images/dice_3.svg\";\nimport dice4 from \"../dice_images/dice_4.svg\";\nimport dice5 from \"../dice_images/dice_5.svg\";\nimport dice6 from \"../dice_images/dice_6.svg\";\nimport RollDice from \"../../utils/RollDice\";\nimport Die from \"./Die\";\nimport RollInterface from \"../../utils/RollInterface\";\n\ninterface DiceData {\n  numberOfDice: number;\n  currentDie: number;\n  rollResults: RollInterface[];\n}\n\nexport const DiceBoard: React.FC<DiceData> = ({\n  numberOfDice,\n  currentDie,\n  rollResults,\n}: DiceData) => {\n  return (\n    <>\n      {numberOfDice >= 1 ? (\n        <div>\n          <Die\n            numberOfDice={numberOfDice}\n            currentDie={1}\n            diceRolled={rollResults[0].diceRolled}\n            numberRolled={rollResults[0].numberRolled}\n          ></Die>\n          <h1>{rollResults.toString}</h1>\n        </div>\n      ) : (\n        <></>\n      )}\n      {numberOfDice >= 2 ? (\n        <Die\n          numberOfDice={numberOfDice}\n          currentDie={2}\n          diceRolled={rollResults[1].diceRolled}\n          numberRolled={rollResults[1].numberRolled}\n        ></Die>\n      ) : (\n        <></>\n      )}\n      {numberOfDice >= 3 ? (\n        <Die\n          numberOfDice={numberOfDice}\n          currentDie={3}\n          diceRolled={rollResults[2].diceRolled}\n          numberRolled={rollResults[2].numberRolled}\n        ></Die>\n      ) : (\n        <></>\n      )}\n      {numberOfDice >= 4 ? (\n        <Die\n          numberOfDice={numberOfDice}\n          currentDie={4}\n          diceRolled={rollResults[3].diceRolled}\n          numberRolled={rollResults[3].numberRolled}\n        ></Die>\n      ) : (\n        <></>\n      )}\n      {numberOfDice >= 5 ? (\n        <Die\n          numberOfDice={numberOfDice}\n          currentDie={5}\n          diceRolled={rollResults[4].diceRolled}\n          numberRolled={rollResults[4].numberRolled}\n        ></Die>\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n\nexport default DiceBoard;\n","import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\";\nimport RollDice from \"../../../utils/RollDice\";\nimport RollInterface from \"../../../utils/RollInterface\";\nimport TestInterface from \"./TestInterface\";\nimport {\n  generateTestData,\n  TestingResults,\n} from \"../TestContainer/Chart/TestData\";\n\nexport const Test: React.FC<TestInterface> = ({\n  testTitle,\n  testInput,\n  testExpectedOutput,\n}: TestInterface) => {\n  const [input, setInput] = React.useState(\"\");\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(event.target.value);\n  };\n\n  const [tests, setTests] = React.useState<TestingResults>();\n  const [percentDeviation, setPercentDeviation] = React.useState(0);\n  const [testPassed, setTestPassed] = React.useState<boolean>();\n  const [bgColorPF, setBgColorPF] = React.useState(\"\");\n\n  const runTest = () => {\n    var inputForTest = parseInt(input);\n    console.log(inputForTest);\n    const testData: TestingResults = generateTestData(inputForTest);\n    setTests(testData);\n\n    var max = Math.max(\n      testData.dice1Total,\n      testData.dice2Total,\n      testData.dice3Total,\n      testData.dice4Total,\n      testData.dice5Total,\n      testData.dice6Total\n    );\n    var min = Math.min(\n      testData.dice1Total,\n      testData.dice2Total,\n      testData.dice3Total,\n      testData.dice4Total,\n      testData.dice5Total,\n      testData.dice6Total\n    );\n\n    setPercentDeviation((max - min) / (inputForTest * 100000));\n\n    if (percentDeviation < testExpectedOutput) {\n      setTestPassed(true);\n    } else {\n      setTestPassed(false);\n    }\n  };\n\n  return (\n    <Card sx={{ minWidth: 275, backgroundColor: \"\" }}>\n      <CardContent>\n        <Typography sx={{ fontSize: 20 }} color=\"text.primary\" gutterBottom>\n          {testTitle}\n        </Typography>\n        <Typography variant=\"h5\" component=\"div\"></Typography>\n        <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\n          Input:\n        </Typography>\n        <TextField\n          onChange={handleChange}\n          id=\"filled-basic\"\n          label=\"# of dice (1-5)\"\n          variant=\"filled\"\n        />\n        <Typography sx={{ mt: 1.5 }} color=\"text.secondary\">\n          Expected Output:\n        </Typography>\n        <Typography\n          sx={{ mt: 1.5, fontSize: 16 }}\n          color=\"text.primary\"\n          gutterBottom\n        >\n          {\"Deviation % < \" + testExpectedOutput}\n        </Typography>\n\n        {percentDeviation == 0 && (\n          <Typography sx={{ mt: 2 }} color=\"text.secondary\">\n            Actual Output:\n          </Typography>\n        )}\n\n        {percentDeviation != 0 && (\n          <Typography sx={{ mt: 2 }} color=\"text.secondary\">\n            Actual Output: {percentDeviation}\n          </Typography>\n        )}\n        <Typography sx={{ mt: 4 }} color=\"text.secondary\">\n          Extra Info:\n        </Typography>\n        <Typography sx={{ mt: 1 }} color=\"text.secondary\">\n          Dice 1: {tests?.dice1Total}\n        </Typography>\n        <Typography sx={{ mt: 1 }} color=\"text.secondary\">\n          Dice 2: {tests?.dice2Total}\n        </Typography>\n        <Typography sx={{ mt: 1 }} color=\"text.secondary\">\n          Dice 3: {tests?.dice3Total}\n        </Typography>\n        <Typography sx={{ mt: 1 }} color=\"text.secondary\">\n          Dice 4: {tests?.dice4Total}\n        </Typography>\n        <Typography sx={{ mt: 1 }} color=\"text.secondary\">\n          Dice 5: {tests?.dice5Total}\n        </Typography>\n        <Typography sx={{ mt: 1 }} color=\"text.secondary\">\n          Dice 6: {tests?.dice6Total}\n        </Typography>\n      </CardContent>\n      <CardActions sx={{ minWidth: 275, backgroundColor: {} }}>\n        <Button onClick={runTest} size=\"large\">\n          Run Test\n        </Button>\n        {testPassed == true && (\n          <Typography sx={{ color: \"#009e05\" }} color=\"#009e05\">\n            Passed\n          </Typography>\n        )}\n        {testPassed == false && (\n          <Typography sx={{ color: \"#009e05\" }} color=\"#bf0000\">\n            Failed\n          </Typography>\n        )}\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default Test;\n","import React from \"react\";\nimport RollDice from \"../../../../utils/RollDice\";\nimport { Paper } from \"@mui/material\";\nimport RollInterface from \"../../../../utils/RollInterface\";\nimport DataChart from \"./DataChart\";\n\nexport interface TestingResults {\n  dice1Total: number;\n  dice2Total: number;\n  dice3Total: number;\n  dice4Total: number;\n  dice5Total: number;\n  dice6Total: number;\n}\n\nexport function generateTestData(amountOfDice: number) {\n  var testRolls: RollInterface[] = [];\n  var resultTestRolls: RollInterface[] = [];\n\n  var testingResultTotals: TestingResults = {\n    dice1Total: 0,\n    dice2Total: 0,\n    dice3Total: 0,\n    dice4Total: 0,\n    dice5Total: 0,\n    dice6Total: 0,\n  };\n\n  var j = amountOfDice - 1;\n  for (var i = 0; i < amountOfDice * 100000; i++) {\n    if (j < 0) {\n      j = amountOfDice - 1;\n    }\n\n    testRolls = RollDice(amountOfDice);\n\n    switch (testRolls[j].numberRolled) {\n      case 1: {\n        testingResultTotals.dice1Total++;\n        break;\n      }\n      case 2: {\n        testingResultTotals.dice2Total++;\n        break;\n      }\n      case 3: {\n        testingResultTotals.dice3Total++;\n        break;\n      }\n      case 4: {\n        testingResultTotals.dice4Total++;\n        break;\n      }\n      case 5: {\n        testingResultTotals.dice5Total++;\n        break;\n      }\n      case 6: {\n        testingResultTotals.dice6Total++;\n        break;\n      }\n    }\n    j--;\n  }\n\n  console.log(\"Dice 1: \" + testingResultTotals.dice1Total);\n  console.log(\"Dice 2: \" + testingResultTotals.dice2Total);\n  console.log(\"Dice 3: \" + testingResultTotals.dice3Total);\n  console.log(\"Dice 4: \" + testingResultTotals.dice4Total);\n  console.log(\"Dice 5: \" + testingResultTotals.dice5Total);\n  console.log(\"Dice 6: \" + testingResultTotals.dice6Total);\n\n  return testingResultTotals;\n}\n","import React from \"react\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport Box from \"@mui/material/Box\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Grid from \"@mui/material/Grid\";\nimport Slider from \"@mui/material/Slider\";\nimport Typography from \"@mui/material/Typography\";\nimport Button from \"@mui/material/Button\";\nimport { Container, useTheme } from \"@mui/material\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport IconButton from \"@mui/material/IconButton\";\nimport SkipPreviousIcon from \"@mui/icons-material/SkipPrevious\";\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\nimport SkipNextIcon from \"@mui/icons-material/SkipNext\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Cover from \"../assets/images/Mac_Miller_Live_from_Space.jpg\";\nimport TestContainer from \"./TestContainer/TestContainer\";\nimport Test from \"./All_Tests/TestDeviation\";\nimport Stack from \"@mui/material/Stack\";\nimport TestInterface from \"./All_Tests/TestInterface\";\n// Testing page\nexport const TestPage = () => {\n  const theme = useTheme();\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"lg\">\n        <Box\n          sx={{\n            bgcolor: \"\",\n            height: \"500vh\",\n            padding: \"20px\",\n          }}\n        >\n          <Stack spacing={2}>\n            {/* <TestContainer></TestContainer> */}\n            <Test\n              testTitle=\"Test Case 1: Testing Deviation for 100,000 Rolls of 1 Dice\"\n              testInput=\"Dice: 1-5\"\n              testExpectedOutput={0.006}\n            ></Test>\n\n            <Test\n              testTitle=\"Test Case 2: Testing Deviation for 100,000 Rolls of 2 Dice\"\n              testInput=\"Dice: 1-5\"\n              testExpectedOutput={0.003}\n            ></Test>\n            {/* <Test\n              testTitle=\"Test Case 1: Testing Deviation for 100,000 Rolls\"\n              testInput=\"Dice: 1-5\"\n              testExpectedOutput=\"4\"\n            ></Test>\n            <Test\n              testTitle=\"Test Case 1: Testing Deviation for 100,000 Rolls\"\n              testInput=\"Dice: 1-5\"\n              testExpectedOutput=\"4\"\n            ></Test>\n            <Test\n              testTitle=\"Test Case 1: Testing Deviation for 100,000 Rolls\"\n              testInput=\"Dice: 1-5\"\n              testExpectedOutput=\"4\"\n            ></Test>\n            <Test\n              testTitle=\"Test Case 1: Testing Deviation for 100,000 Rolls\"\n              testInput=\"Dice: 1-5\"\n              testExpectedOutput=\"4\"\n            ></Test> */}\n          </Stack>\n        </Box>\n      </Container>\n    </React.Fragment>\n  );\n};\n\nexport default TestPage;\n","import * as React from \"react\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport Box from \"@mui/material/Box\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Grid from \"@mui/material/Grid\";\nimport Slider from \"@mui/material/Slider\";\nimport Typography from \"@mui/material/Typography\";\nimport Button from \"@mui/material/Button\";\nimport RollDice from \"../../utils/RollDice\";\nimport RollInterface from \"../../utils/RollInterface\";\nimport DiceBoard from \"../Dice/DiceBoard\";\nimport \"./TabPanel.css\";\nimport TestPage from \"../Testing/TestPage\";\ndeclare type resultCallback = (myArgument: RollInterface[]) => void;\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`full-width-tabpanel-${index}`}\n      aria-labelledby={`full-width-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index: number) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\nexport default function BasicTabs() {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const [numberOfDice, setNumberOfDice] = React.useState<number>(1);\n\n  // Changes Dice and slider\n  const handleChangeSlider = (event: Event, newValue: number | number[]) => {\n    setNumberOfDice(newValue as number);\n  };\n\n  // Default on startup\n  var initRoll: RollInterface = { diceRolled: false, numberRolled: false };\n  var initRolls: RollInterface[] = [\n    initRoll,\n    initRoll,\n    initRoll,\n    initRoll,\n    initRoll,\n  ];\n\n  const [rollResults, setRollResults] =\n    React.useState<RollInterface[]>(initRolls);\n\n  const handleRollDice = () => {\n    setRollResults(RollDice(numberOfDice));\n\n    console.log(rollResults);\n  };\n\n  return (\n    <Box sx={{ width: \"100%\" }}>\n      <Box\n        sx={{\n          borderBottom: 2,\n          borderColor: \"divider\",\n          backgroundColor: \"#ffffff00\",\n        }}\n      >\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          textColor=\"inherit\"\n          indicatorColor=\"primary\"\n          variant=\"fullWidth\"\n          aria-label=\"full width tabs example\"\n          sx={{\n            borderBottom: 2,\n            borderColor: \"divider\",\n            backgroundColor: \"#171717\",\n          }}\n        >\n          <Tab label=\"Dice Roll\" {...a11yProps(0)} />\n          <Tab label=\"Testing\" {...a11yProps(1)} />\n        </Tabs>\n      </Box>\n      <TabPanel value={value} index={0}>\n        <div className=\"app-bar\">\n          <AppBar position=\"static\"></AppBar>\n          <div className=\"roll-area\">\n            <Grid\n              container\n              spacing={2}\n              direction=\"row\"\n              justifyContent=\"space-evenly\"\n              alignItems=\"center\"\n              alignSelf=\"center\"\n              sx={{\n                backgroundColor: \"#b32424\",\n                marginTop: \"10vh\",\n                // marginLeft: \"10vh\",\n                // marginRight: \"10vh\",\n                borderTopLeftRadius: \"10px\",\n                borderTopRightRadius: \"10px\",\n              }}\n            >\n              <Grid item>\n                <Typography sx={{ color: \"#EEEEEE\", fontSize: \"40px\" }}>\n                  <code>\n                    Dice: {\"\"}\n                    {numberOfDice}\n                  </code>\n                </Typography>\n              </Grid>\n              <Grid item sm={6}>\n                {\" \"}\n                <Slider\n                  min={1}\n                  max={5}\n                  value={numberOfDice}\n                  onChange={handleChangeSlider}\n                  sx={{\n                    height: \"100%\",\n                    color: \"#fff\",\n                    borderColor: \"divider\",\n                    backgroundColor: \"#171717\",\n                  }}\n                />\n              </Grid>\n              <div\n                style={{\n                  width: \"100%\",\n                  minHeight: \"20vh\",\n                  alignItems: \"center\",\n                  backgroundColor: \"#252525\",\n                  boxShadow: \"5px 15px 2px 1px #171717\",\n                  // borderBottomWidth: \"2px\",\n                  // borderBottomColor: \"#fff\",\n                  // borderBottomLeftRadius: \"10px\",\n                }}\n              >\n                <Box display=\"flex\" justifyContent=\"center\" p={12}>\n                  <DiceBoard\n                    numberOfDice={numberOfDice}\n                    currentDie={1}\n                    rollResults={rollResults}\n                  ></DiceBoard>\n\n                  <Button\n                    onClick={handleRollDice}\n                    size=\"large\"\n                    variant=\"contained\"\n                    color=\"error\"\n                  >\n                    Roll\n                  </Button>\n                </Box>\n              </div>\n            </Grid>\n          </div>\n        </div>\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <TestPage></TestPage>\n      </TabPanel>\n    </Box>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { createTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Input from \"@material-ui/core/Input\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport { Box } from \"@material-ui/core\";\nimport { AppBar } from \"@material-ui/core\";\nimport TabPanel from \"./components/Panel/TabPanel\";\n\nfunction App() {\n  const theme = createTheme({});\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <TabPanel></TabPanel>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport themes from \"devextreme/ui/themes\";\n\nthemes.current = \"dx.dark.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}